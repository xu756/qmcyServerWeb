// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userGroupFieldNames          = builder.RawFieldNames(&UserGroup{}, true)
	userGroupRows                = strings.Join(userGroupFieldNames, ",")
	userGroupRowsExpectAutoSet   = strings.Join(stringx.Remove(userGroupFieldNames), ",")
	userGroupRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(userGroupFieldNames, "id"))

	cachePublicUserGroupIdPrefix = "cache:public:userGroup:id:"
)

type (
	userGroupModel interface {
		Insert(ctx context.Context, data *UserGroup) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserGroup, error)
		Update(ctx context.Context, data *UserGroup) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserGroupModel struct {
		sqlc.CachedConn
		table string
	}

	UserGroup struct {
		Id          int64 `db:"id"`            // ID说
		UserGroupId int64 `db:"user_group_id"` // 用户组ID
		UserId      int64 `db:"user_id"`       // 用户ID
		Created     int64 `db:"created"`       // 创建时间
		Creator     int64 `db:"creator"`       // 创建人
		Edited      int64 `db:"edited"`        // 修改时间
		Editor      int64 `db:"editor"`        // 修改人
		Deleted     int64 `db:"deleted"`       // 逻辑删除:0=未删除,1=已删除
	}
)

func newUserGroupModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserGroupModel {
	return &defaultUserGroupModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      `"public"."user_group"`,
	}
}

func (m *defaultUserGroupModel) withSession(session sqlx.Session) *defaultUserGroupModel {
	return &defaultUserGroupModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      `"public"."user_group"`,
	}
}

func (m *defaultUserGroupModel) Delete(ctx context.Context, id int64) error {
	publicUserGroupIdKey := fmt.Sprintf("%s%v", cachePublicUserGroupIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicUserGroupIdKey)
	return err
}

func (m *defaultUserGroupModel) FindOne(ctx context.Context, id int64) (*UserGroup, error) {
	publicUserGroupIdKey := fmt.Sprintf("%s%v", cachePublicUserGroupIdPrefix, id)
	var resp UserGroup
	err := m.QueryRowCtx(ctx, &resp, publicUserGroupIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userGroupRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserGroupModel) Insert(ctx context.Context, data *UserGroup) (sql.Result, error) {
	publicUserGroupIdKey := fmt.Sprintf("%s%v", cachePublicUserGroupIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8)", m.table, userGroupRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserGroupId, data.UserId, data.Created, data.Creator, data.Edited, data.Editor, data.Deleted)
	}, publicUserGroupIdKey)
	return ret, err
}

func (m *defaultUserGroupModel) Update(ctx context.Context, data *UserGroup) error {
	publicUserGroupIdKey := fmt.Sprintf("%s%v", cachePublicUserGroupIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, userGroupRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.UserGroupId, data.UserId, data.Created, data.Creator, data.Edited, data.Editor, data.Deleted)
	}, publicUserGroupIdKey)
	return err
}

func (m *defaultUserGroupModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePublicUserGroupIdPrefix, primary)
}

func (m *defaultUserGroupModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", userGroupRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserGroupModel) tableName() string {
	return m.table
}
